/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://v2.api.spacetraders.io\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MarketTransaction {
    /// The symbol of the ship that made the transaction.
    #[serde(rename = "shipSymbol")]
    pub ship_symbol: String,
    /// The symbol of the trade good.
    #[serde(rename = "tradeSymbol", skip_serializing_if = "Option::is_none")]
    pub trade_symbol: Option<String>,
    /// The type of transaction.
    #[serde(rename = "type")]
    pub r#type: RHashType,
    /// The number of units of the transaction.
    #[serde(rename = "units")]
    pub units: i32,
    /// The price per unit of the transaction.
    #[serde(rename = "pricePerUnit")]
    pub price_per_unit: i32,
    /// The total price of the transaction.
    #[serde(rename = "totalPrice", skip_serializing_if = "Option::is_none")]
    pub total_price: Option<i32>,
    /// The timestamp of the transaction.
    #[serde(rename = "timestamp")]
    pub timestamp: String,
}

impl MarketTransaction {
    pub fn new(
        ship_symbol: String,
        r#type: RHashType,
        units: i32,
        price_per_unit: i32,
        timestamp: String,
    ) -> MarketTransaction {
        MarketTransaction {
            ship_symbol,
            trade_symbol: None,
            r#type,
            units,
            price_per_unit,
            total_price: None,
            timestamp,
        }
    }
}

/// The type of transaction.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "PURCHASE")]
    Purchase,
    #[serde(rename = "SELL")]
    Sell,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Purchase
    }
}
